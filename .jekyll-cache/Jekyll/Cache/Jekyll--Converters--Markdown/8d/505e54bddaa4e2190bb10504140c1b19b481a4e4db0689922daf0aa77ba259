I")<ul id="markdown-toc">
  <li><a href="#字符串" id="markdown-toc-字符串">字符串</a>    <ul>
      <li><a href="#string字面值" id="markdown-toc-string字面值">String字面值</a></li>
      <li><a href="#字符串对象" id="markdown-toc-字符串对象">字符串对象</a></li>
      <li><a href="#string对象的一些方法" id="markdown-toc-string对象的一些方法">string对象的一些方法</a></li>
    </ul>
  </li>
  <li><a href="#多行模板字符串" id="markdown-toc-多行模板字符串">多行模板字符串</a>    <ul>
      <li><a href="#多行字符串" id="markdown-toc-多行字符串">多行字符串</a></li>
      <li><a href="#嵌入表达式" id="markdown-toc-嵌入表达式">嵌入表达式</a></li>
    </ul>
  </li>
</ul>

<p><code class="highlighter-rouge">JavaScript</code>中字符串是不可变的，而数组是可变的。字符串<em>不可变</em>是指字符串的成员函数不会改变其原始值，而是创建并返回一个新的字符串。而数组的成员函数都是在其原始值上进行操作。</p>

<p><code class="highlighter-rouge">JavaScript</code>中的<code class="highlighter-rouge">String</code>类型用于表示文本型的数据。它是由无符号整数值（<code class="highlighter-rouge">16bit</code>）作为元素而组成的集合。字符串中的每个元素在字符串中占据一个位置。第一个元素的<code class="highlighter-rouge">index</code>值是<code class="highlighter-rouge">0</code>, 下一个元素的<code class="highlighter-rouge">index</code>值是<code class="highlighter-rouge">1</code>, 以此类推。字符串的长度就是字符串中所含的元素个数。你可以通过<strong>String字面值</strong>或者<strong>String对象</strong>两种方式创建一个字符串。</p>

<!-- more -->

<h2 id="字符串">字符串</h2>

<h3 id="string字面值">String字面值</h3>

<p>可以使用单引号或双引号创建简单的字符串:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">'</span><span class="s1">foo</span><span class="dl">'</span>
<span class="dl">"</span><span class="s2">bar</span><span class="dl">"</span>

<span class="dl">'</span><span class="se">\</span><span class="s1">xA9</span><span class="dl">'</span> <span class="c1">// "©" \x之后的数值将被认为是一个16进制数</span>
<span class="dl">'</span><span class="se">\</span><span class="s1">u00A9</span><span class="dl">'</span> <span class="c1">// "©" Unicode转义序列在\u之后需要至少4个字符</span>
</code></pre></div></div>

<h3 id="字符串对象">字符串对象</h3>

<p>String 对象是对原始string类型的封装</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="dl">"</span><span class="s2">foo</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// Creates a String object</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span> <span class="c1">// Displays: { '0': 'f', '1': 'o', '2': 'o'}</span>
<span class="k">typeof</span> <span class="nx">s</span><span class="p">;</span> <span class="c1">// Returns 'object'</span>
</code></pre></div></div>

<p>你可以在<code class="highlighter-rouge">String</code>字面值上使用<code class="highlighter-rouge">String</code>对象的任何方法 – <code class="highlighter-rouge">JavaScript</code>自动把<code class="highlighter-rouge">String</code>字面值转换为一个临时的<code class="highlighter-rouge">String</code>对象, 然后调用其相应方法,最后丢弃此临时对象。</p>

<p>除非必要, 应该尽量使用<code class="highlighter-rouge">String</code>字面值, 因为<code class="highlighter-rouge">String</code>对象的某些行为可能并不与直觉一致:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s1</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">2 + 2</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// Creates a string literal value</span>
<span class="kd">var</span> <span class="nx">s2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="dl">"</span><span class="s2">2 + 2</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// Creates a String object</span>
<span class="nb">eval</span><span class="p">(</span><span class="nx">s1</span><span class="p">);</span> <span class="c1">// Returns the number 4</span>
<span class="nb">eval</span><span class="p">(</span><span class="nx">s2</span><span class="p">);</span> <span class="c1">// Returns the string "2 + 2"</span>
</code></pre></div></div>

<h3 id="string对象的一些方法">string对象的一些方法</h3>

<ul>
  <li><code class="highlighter-rouge">charAt, charCodeAt, codePointAt</code> : 返回字符串指定位置的字符或者字符编码</li>
  <li><code class="highlighter-rouge">indexOf, lastIndexOf</code> : 分别返回字符串中指定子串的位置或最后位置</li>
  <li><code class="highlighter-rouge">startsWith, endsWith, includes</code> : 返回字符串是否以指定字符串开始、结束或包含指定字符串</li>
  <li><code class="highlighter-rouge">concat</code> : 连接两个字符串并返回新的字符串</li>
  <li><code class="highlighter-rouge">fromCharCode, fromCodePoint</code> : 从指定的Unicode值序列构造一个字符串。这是一个String类方法，不是实例方法</li>
  <li><code class="highlighter-rouge">split</code> : 通过将字符串分离成一个个子串来把一个String对象分裂到一个字符串数组中</li>
  <li><code class="highlighter-rouge">slice</code> : 从一个字符串提取片段并作为新字符串返回</li>
  <li><code class="highlighter-rouge">substring, substr</code> : 分别通过指定起始和结束位置，起始位置和长度来返回字符串的指定子集</li>
  <li><code class="highlighter-rouge">match, replace, search</code> : 通过正则表达式来工作</li>
  <li><code class="highlighter-rouge">toLowerCase, toUpperCase</code> : 分别返回字符串的小写表示和大写表示</li>
  <li><code class="highlighter-rouge">normalize</code> : 按照指定的一种 Unicode 正规形式将当前字符串正规化</li>
  <li><code class="highlighter-rouge">repeat</code> : 将字符串内容重复指定次数后返回</li>
  <li><code class="highlighter-rouge">trim</code> : 去掉字符串开头和结尾的空白字符</li>
</ul>

<h2 id="多行模板字符串">多行模板字符串</h2>

<p>模板字符串是一种允许内嵌表达式的<code class="highlighter-rouge">String</code>字面值。</p>

<p>模板字符串使用反分号<code class="highlighter-rouge">(</code><code class="highlighter-rouge">)</code>包裹内容而不是单引号或双引号。模板字符串可以包含占位符，占位符用美元符号和花括号标识<code class="highlighter-rouge">${expression}</code>。</p>

<h3 id="多行字符串">多行字符串</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">string text line 1</span><span class="se">\n\</span><span class="s2">
string text line 2</span><span class="dl">"</span><span class="p">);</span> <span class="c1">//这是通常的做法，使用\n进行转义</span>

<span class="c1">//使用多行字符串</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`string text line 1
string text line 2`</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="嵌入表达式">嵌入表达式</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//一般为了嵌入表达式的做法</span>
<span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Fifteen is </span><span class="dl">"</span> <span class="o">+</span> <span class="p">(</span><span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">)</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> and</span><span class="se">\n</span><span class="s2">not </span><span class="dl">"</span> <span class="o">+</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">)</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">.</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">// "Fifteen is 15 and</span>
<span class="c1">// not 20."</span>

<span class="c1">//占位符</span>
<span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Fifteen is </span><span class="p">${</span><span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">}</span><span class="s2"> and\nnot </span><span class="p">${</span><span class="mi">2</span> <span class="o">*</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">}</span><span class="s2">.`</span><span class="p">);</span>
<span class="c1">// "Fifteen is 15 and</span>
<span class="c1">// not 20."</span>

</code></pre></div></div>

:ET