I"T<ul id="markdown-toc">
  <li><a href="#图的一些概念" id="markdown-toc-图的一些概念">图的一些概念</a>    <ul>
      <li><a href="#相邻顶点" id="markdown-toc-相邻顶点">相邻顶点</a></li>
      <li><a href="#顶点的度" id="markdown-toc-顶点的度">顶点的度</a></li>
      <li><a href="#路径" id="markdown-toc-路径">路径</a></li>
    </ul>
  </li>
  <li><a href="#图的分类" id="markdown-toc-图的分类">图的分类</a>    <ul>
      <li><a href="#有向图和无向图" id="markdown-toc-有向图和无向图">有向图和无向图</a></li>
      <li><a href="#加权图" id="markdown-toc-加权图">加权图</a></li>
      <li><a href="#有环图和无环图" id="markdown-toc-有环图和无环图">有环图和无环图</a></li>
    </ul>
  </li>
  <li><a href="#图的表示" id="markdown-toc-图的表示">图的表示</a>    <ul>
      <li><a href="#邻接矩阵" id="markdown-toc-邻接矩阵">邻接矩阵</a>        <ul>
          <li><a href="#邻接表" id="markdown-toc-邻接表">邻接表</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#图的遍历" id="markdown-toc-图的遍历">图的遍历</a>    <ul>
      <li><a href="#广度优先搜索" id="markdown-toc-广度优先搜索">广度优先搜索</a></li>
      <li><a href="#深度优先搜素" id="markdown-toc-深度优先搜素">深度优先搜素</a></li>
    </ul>
  </li>
</ul>

<p>图也是一种非线性的数据结构，是网络结构的抽象模型，是一组由<em>边</em>连接的<em>节点</em>。图的表示法:</p>

<p><code class="highlighter-rouge">G = (V,E)</code>，其中<code class="highlighter-rouge">V</code>表示一组节点，<code class="highlighter-rouge">E</code>表示一组边。</p>

<p>图论的理解有点难度，这里也是介绍一些基本点，仅仅包括图的表示和遍历。因为图论又有好多图，实在是好累。</p>

<!-- more -->

<h2 id="图的一些概念">图的一些概念</h2>

<p><img src="/styles/images/algorithms/graph.png" alt="graph" /></p>

<h4 id="相邻顶点">相邻顶点</h4>

<p>由一条边连接在一起的顶点叫做<em>相邻顶点</em>。</p>

<h4 id="顶点的度">顶点的度</h4>

<p>一个顶点的度是其相邻顶点的数量。比如，A的度是3。</p>

<h4 id="路径">路径</h4>

<p>路径是顶点v<sub>1</sub>,v<sub>2</sub>,…,v<sub>k</sub>的一个连续序列，其中v<sub>i</sub>和v<sub>i+1</sub>是相邻的。比如，ABEI就是一条路径。</p>

<p>简单路径要求不包含重复的顶点。</p>

<hr />

<h2 id="图的分类">图的分类</h2>

<h4 id="有向图和无向图">有向图和无向图</h4>

<p>按照边是否有方向。</p>

<h4 id="加权图">加权图</h4>

<p>图的边赋予权值。</p>

<h4 id="有环图和无环图">有环图和无环图</h4>

<p>按照图中是否存在环进行的分类。</p>

<hr />

<h2 id="图的表示">图的表示</h2>

<p>这里仅介绍两种常用的表示方法。</p>

<h3 id="邻接矩阵">邻接矩阵</h3>

<p>如果索引为i的节点和索引为j的节点相邻，则array[i][j] ==== 1；否则，array[i][j] === 0。</p>

<p><img src="/styles/images/algorithms/graph-02.png" alt="邻接矩阵" /></p>

<blockquote>
  <p>图中为0的部分被省略了，因为画图实在太累。</p>
</blockquote>

<h4 id="邻接表">邻接表</h4>

<p>另一种方式就是邻接表。这是一种动态的数据结构，通常情况下，我们会使用链表的结构。</p>

<p><img src="/styles/images/algorithms/graph-03.png" alt="邻接表" /></p>

<hr />

<h2 id="图的遍历">图的遍历</h2>

<p>有两种算法可以对图进行遍历: 广度优先搜索(Breadth-First Search, BFS)和深度优先搜索(Depth-First Search, DFS)。图遍历可以用来寻找特定的顶点或寻找两个顶点之间的路径，检查图是否连通，检查图是否含有环等。</p>

<p>图遍历的思想是:</p>

<p>追踪每个第一次访问的节点，并且追踪有哪些节点还没有被完全探索。对于两种遍历方法，都需要指明第一个被访问的顶点。完全探索一个顶点要求我们查看该顶点的每一条边。为了保证算法的效率，务必访问每个顶点至多两次。</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">算法</th>
      <th style="text-align: center">数据结构</th>
      <th style="text-align: center">描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">广度优先搜索</td>
      <td style="text-align: center">队列</td>
      <td style="text-align: center">将顶点存入队列中，最先如队列的顶点先被探索</td>
    </tr>
    <tr>
      <td style="text-align: center">深度优先搜索</td>
      <td style="text-align: center">栈</td>
      <td style="text-align: center">将顶点存入栈中，顶点是沿着路径被探索的，存在新的相邻节点就去探索</td>
    </tr>
  </tbody>
</table>

<h3 id="广度优先搜索">广度优先搜索</h3>

<p>广度优先搜索的动画演示: <a href="http://www.cs.usfca.edu/~galles/visualization/BFS.html">Data Structure Visualizations</a></p>

<p><img src="/styles/images/algorithms/bfs.png" alt="广度优先搜索" /></p>

<ol>
<li> 创建一个队列Q </li>
<li>  将v标注为被发现，并将v入队列Q </li> 
<li> 如果Q非空，则: 
<ol type="a">
<li>将u从Q从出队列；</li>
<li>标注u为被发现；</li>
<li> 将u所有未被访问过的邻点入队列；</li>
<li> u标注为已被探索。</li></ol>
</li></ol>

<p>广度优先搜索的应用: 寻找最短路径</p>

<h3 id="深度优先搜素">深度优先搜素</h3>

<p>深度优先搜索的动画演示: <a href="http://www.cs.usfca.edu/~galles/visualization/DFS.html">Data Structure Visualizations</a></p>

<p>深度优先搜索算法将会从第一个指定的顶点开始遍历图，沿着路径直到这条路径最后一个顶点被访问了，接着原路回退并探索下一条路径。</p>

<p><img src="/styles/images/algorithms/dfs.png" alt="深度优先搜索" /></p>

<p>要访问顶点v，步骤如下:</p>

<ol>
<li>标注v为被发现</li>
<li>对于v的所有未访问的邻点w</li>
<ol type="a">
<li>访问顶点w(递归)</li></ol>
<li>标注v已被探索</li>
</ol>

<p>可以看见，深度优先搜索的步骤是递归的。</p>

<p>深度优先搜索的应用：拓扑排序</p>

<p>有关图论还有很多方面，看来我以后得好好啃一下了。拜。</p>
:ET