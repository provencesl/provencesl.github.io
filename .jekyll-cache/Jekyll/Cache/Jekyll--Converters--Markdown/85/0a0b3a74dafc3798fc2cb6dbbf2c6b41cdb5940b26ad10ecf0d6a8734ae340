I"s?<ul id="markdown-toc">
  <li><a href="#标准的-json-语法" id="markdown-toc-标准的-json-语法">标准的 JSON 语法</a>    <ul>
      <li><a href="#与-javascript-对象的区别" id="markdown-toc-与-javascript-对象的区别">与 JavaScript 对象的区别</a></li>
      <li><a href="#json-验证工具" id="markdown-toc-json-验证工具">JSON 验证工具</a></li>
      <li><a href="#json-的媒体类型" id="markdown-toc-json-的媒体类型">JSON 的媒体类型</a></li>
      <li><a href="#json-的数据类型" id="markdown-toc-json-的数据类型">JSON 的数据类型</a>        <ul>
          <li><a href="#对象数据类型" id="markdown-toc-对象数据类型">对象数据类型</a></li>
          <li><a href="#字符串类型" id="markdown-toc-字符串类型">字符串类型</a></li>
          <li><a href="#数字类型" id="markdown-toc-数字类型">数字类型</a></li>
          <li><a href="#boolean-类型" id="markdown-toc-boolean-类型">boolean 类型</a></li>
          <li><a href="#null-类型" id="markdown-toc-null-类型">null 类型</a></li>
          <li><a href="#数组类型" id="markdown-toc-数组类型">数组类型</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#json-schema" id="markdown-toc-json-schema">JSON Schema</a></li>
  <li><a href="#json-序列和反序列化" id="markdown-toc-json-序列和反序列化">JSON 序列和反序列化</a></li>
  <li><a href="#json-中的安全问题" id="markdown-toc-json-中的安全问题">JSON 中的安全问题</a></li>
  <li><a href="#json-的其他应用场景" id="markdown-toc-json-的其他应用场景">JSON 的其他应用场景</a>    <ul>
      <li><a href="#与数据库交互" id="markdown-toc-与数据库交互">与数据库交互</a></li>
      <li><a href="#服务器端的-json" id="markdown-toc-服务器端的-json">服务器端的 JSON</a></li>
      <li><a href="#作为配置文件" id="markdown-toc-作为配置文件">作为配置文件</a></li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>本文部分内容来自 《Introduction to JavaScript Object Notation》，<a href="http://www.json.org/">http://www.json.org/</a>。</p>
</blockquote>

<p>JSON (<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation)，是一种轻量级的数据交换格式<sup><a href="http://www.json.org/">来源</a></sup>。<strong>源于</strong> JavaScript 的一个子集。但是它<strong>独立于</strong>编程语言。JSON 之父是 <a href="https://en.wikipedia.org/wiki/Douglas_Crockford">Douglas Crockford</a>。</p>

<!-- more -->

<h2 id="标准的-json-语法">标准的 JSON 语法</h2>

<p>JSON 标准语法基于两种结构:</p>

<ul>
  <li>name/value pairs</li>
  <li>ordered list of values，一般就是数组</li>
</ul>

<h3 id="与-javascript-对象的区别">与 JavaScript 对象的区别</h3>

<p>值得注意的是，虽然 JSON 源于 JavaScript 的子集，但是基于目前的发展，有些 JavaScript 对象不是 JSON，有些 JSON 并不是 JavaScript 对象<sup><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON">来源</a></sup>。</p>

<ul>
  <li>JSON 属性名称使用双引号，而 JavaScript 对象的属性可以不使用、使用单引号或者双引号。</li>
  <li>JavaScript 对象中常包含方法(函数)，JSON 不会涉及对象字面量中的函数。</li>
</ul>

<h3 id="json-验证工具">JSON 验证工具</h3>

<p>下面提供几个 JSON 在线验证的网站：</p>

<ul>
  <li><a href="https://jsonformatter.curiousconcept.com/">JSON Formatter &amp; Validator</a></li>
  <li><a href="http://jsoneditoronline.org/">JSON Editor Online</a></li>
</ul>

<h3 id="json-的媒体类型">JSON 的媒体类型</h3>

<p>JSON 的 MIME 类型是 <code class="highlighter-rouge">application/json</code>。</p>

<h3 id="json-的数据类型">JSON 的数据类型</h3>

<h4 id="对象数据类型">对象数据类型</h4>

<p>非常简单，就是花括号包裹的 name/value 对。是一种复合数据类型。</p>

<h4 id="字符串类型">字符串类型</h4>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"xiaoke love yuer"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>注意转义</strong>。</p>

<h4 id="数字类型">数字类型</h4>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">25</span><span class="p">,</span><span class="w">
    </span><span class="nl">"earthMass"</span><span class="p">:</span><span class="w"> </span><span class="mf">5.97219e+24</span><span class="p">,</span><span class="w">
    </span><span class="nl">"decimal"</span><span class="p">:</span><span class="w"> </span><span class="mf">2.3</span><span class="p">,</span><span class="w">
    </span><span class="nl">"negativeNumber"</span><span class="p">:</span><span class="w"> </span><span class="mf">-122.23</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>可以是整数、小数、负数或者指数。</p>

<h4 id="boolean-类型">boolean 类型</h4>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"xiaokeLoveYuer"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h4 id="null-类型">null 类型</h4>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"color"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>null 可以用来表达<em>无</em>的意思。需要注意的是，json 中没有 undefined 类型。</p>

<h4 id="数组类型">数组类型</h4>

<p>数组类型就是值构成的列表和集合。一般来说，数组中的值应具有相同的数据类型(不是必须，而是为了可移植性)。数组类型也是复杂数据类型。</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:[</span><span class="w">
        </span><span class="s2">"xiaoke"</span><span class="p">,</span><span class="s2">"yuer"</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>比如这种:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"xiaoke love yuer"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"xiaokeLoveYuer"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"yuer love xiaoke"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"yuerLovexiaoke"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<hr />

<h2 id="json-schema">JSON Schema</h2>

<p>JSON Schema，即 JSON 的一致性验证 (conformity validation)。之前提到的 JSON 验证器是确保 JSON 不存在<strong>语法错误</strong>，而 JSON 的一致性检查意在确保<strong>数据符合要求</strong>。主要有三点验证：</p>

<ul>
  <li>值的数据类型是否正确</li>
  <li>是否包含所需要的数据</li>
  <li>值的形式是不是需要的</li>
</ul>

<p>JSON Schema 还处于草案当中，官网地址是 <a href="http://json-schema.org/">http://json-schema.org/</a>。</p>

<p>这是一个摘自官网的例子:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"$schema"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://json-schema.org/draft-06/schema#"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Product"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"A product from Acme's catalog"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"object"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"properties"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"The unique identifier for a product"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"integer"</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Name of the product"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"number"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"minimum"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"required"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"id"</span><span class="p">,</span><span class="w"> </span><span class="s2">"name"</span><span class="p">,</span><span class="w"> </span><span class="s2">"price"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>上面的代码是一个 Production Schema，也是一个 JSON。内容有点长，待我一步一步解释。</p>

<ul>
  <li><code class="highlighter-rouge">$schema</code> 关键字</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"$schema"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://json-schema.org/draft-06/schema#"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>声明其为一个 schema 文件，值为所用 draft 版本的链接，因为还处于草案阶段。</p>

<ul>
  <li><code class="highlighter-rouge">title</code> 关键字</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Product"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>JSON Schema 的标题。这是个描述性的关键字，和 <code class="highlighter-rouge">description</code> 一样，用于 JSON Schema 的描述，不施加任何验证性内容。</p>

<ul>
  <li><code class="highlighter-rouge">type</code> 关键字</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"object"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>type 关键字用于对 JSON 数据类型的限制。</p>

<ul>
  <li><code class="highlighter-rouge">properties</code> 关键字</li>
</ul>

<p><code class="highlighter-rouge">properties</code> 关键字就是我们想要的 JSON 的 name/value 对。</p>

<ul>
  <li><code class="highlighter-rouge">required</code> 关键字</li>
</ul>

<p><code class="highlighter-rouge">required</code> 关键字用来表示必填字段。</p>

<p>从而，对于上述的第一个问题和第二个问题，我们就可以很好地解决了。对于第三个问题，我们可以通过 <code class="highlighter-rouge">minimum</code>、<code class="highlighter-rouge">maxLength/minLength</code>、<code class="highlighter-rouge">exclusiveMinimum</code> 来解决。</p>

<p>下面就是一个验证通过的 JSON：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
</span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
</span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"xiaokeloveyuer"</span><span class="p">,</span><span class="w">
</span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">4</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<hr />

<h2 id="json-序列和反序列化">JSON 序列和反序列化</h2>

<p>JSON 对象拥有两个方法：<code class="highlighter-rouge">stringify()</code> 和 <code class="highlighter-rouge">parse()</code>。</p>

<ul>
  <li><code class="highlighter-rouge">stringify()</code> 将 JavaScript 序列化为 JSON 字符串。这叫<em>序列化</em>，本意是<strong>将对象转换为文本</strong>的过程。</li>
  <li><code class="highlighter-rouge">parse()</code> 将 JSON 字符串解析为原生 JavaScript 对象。这叫<em>反序列化</em>，也叫解析，是<strong>将文本转换为对象</strong>的过程。</li>
</ul>

<hr />

<h2 id="json-中的安全问题">JSON 中的安全问题</h2>

<p>暂时略。</p>

<hr />

<h2 id="json-的其他应用场景">JSON 的其他应用场景</h2>

<h3 id="与数据库交互">与数据库交互</h3>

<h3 id="服务器端的-json">服务器端的 JSON</h3>

<h3 id="作为配置文件">作为配置文件</h3>

<p>作为静态配置文件也让 JSON 大放异彩。比如 npm 的 package.json 文件，VSCode 都采用 JSON 作为静态配置文件。</p>

:ET