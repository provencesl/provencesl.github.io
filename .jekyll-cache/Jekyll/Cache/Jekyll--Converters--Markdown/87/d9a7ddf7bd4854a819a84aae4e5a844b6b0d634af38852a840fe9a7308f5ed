I"<ul id="markdown-toc">
  <li><a href="#树的遍历" id="markdown-toc-树的遍历">树的遍历</a>    <ul>
      <li><a href="#先序遍历--preorder-traversal" id="markdown-toc-先序遍历--preorder-traversal">先序遍历 – preorder traversal</a></li>
      <li><a href="#后序遍历--postorder-traversal" id="markdown-toc-后序遍历--postorder-traversal">后序遍历 – postorder traversal</a></li>
    </ul>
  </li>
  <li><a href="#二叉树--binary-tree" id="markdown-toc-二叉树--binary-tree">二叉树 – binary tree</a>    <ul>
      <li><a href="#二叉树的遍历" id="markdown-toc-二叉树的遍历">二叉树的遍历</a>        <ul>
          <li><a href="#中序遍历--inorder-traversal" id="markdown-toc-中序遍历--inorder-traversal">中序遍历 – inorder traversal</a></li>
          <li><a href="#后序遍历--postorder-traversal-1" id="markdown-toc-后序遍历--postorder-traversal-1">后序遍历 – postorder traversal</a></li>
          <li><a href="#先序遍历--preorder-traversal-1" id="markdown-toc-先序遍历--preorder-traversal-1">先序遍历 – preorder traversal</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#二叉查找树" id="markdown-toc-二叉查找树">二叉查找树</a></li>
  <li><a href="#avl树" id="markdown-toc-avl树">AVL树</a></li>
  <li><a href="#b-树-b-tree" id="markdown-toc-b-树-b-tree">B-树 (B-tree)</a></li>
  <li><a href="#红黑树" id="markdown-toc-红黑树">红黑树</a></li>
</ul>

<p>树也是一种非线性的数据结构。它对于存储需要快速查找的数据非常有用。有关树的常用术语有:</p>

<ul>
  <li>根节点，这个好理解，不多说</li>
  <li>子树，子树由节点和它的后代构成</li>
  <li>节点的深度，节点的深度取决于它的祖先节点的数量</li>
  <li>树的深度，就是所有节点深度的最大值</li>
</ul>

<p>废话不多说，其实我们对这种结构还是理解挺多的。</p>

<!-- more -->

<h2 id="树的遍历">树的遍历</h2>

<h4 id="先序遍历--preorder-traversal">先序遍历 – preorder traversal</h4>

<p>在先序遍历中，对节点的处理工作是在它的诸儿子节点被处理之前进行的。</p>

<h4 id="后序遍历--postorder-traversal">后序遍历 – postorder traversal</h4>

<p>在后序遍历中，对节点的处理工作是在它的诸儿子节点被计算后进行的。</p>

<hr />

<h2 id="二叉树--binary-tree">二叉树 – binary tree</h2>

<p>二叉树的节点最多只能有两个子节点: 一个是左侧子节点，另一个是右侧子节点。</p>

<h3 id="二叉树的遍历">二叉树的遍历</h3>

<p><img src="/styles/images/algorithms/expression-tree.png" alt="表达式树" /></p>

<h4 id="中序遍历--inorder-traversal">中序遍历 – inorder traversal</h4>

<p>先访问左子树，然后根节点，最后右子树。</p>

<blockquote>
  <p>得到：<code class="highlighter-rouge">(a+b*c) + ((d*e + f)*g)</code></p>
</blockquote>

<h4 id="后序遍历--postorder-traversal-1">后序遍历 – postorder traversal</h4>

<p>先访问左子树，然后右子树，最后根节点。</p>

<blockquote>
  <p>得到： <code class="highlighter-rouge">abc+ + de*f + g* +</code></p>
</blockquote>

<h4 id="先序遍历--preorder-traversal-1">先序遍历 – preorder traversal</h4>

<p>先访问根节点，然后遍历左子树，最后遍历右子树。在遍历左右子树的时候，仍先访问根节点。记为：<strong>根左右</strong></p>

<blockquote>
  <p>得到：<code class="highlighter-rouge">+ +a*bc* + *defg</code></p>
</blockquote>

<hr />

<h2 id="二叉查找树">二叉查找树</h2>

<p>二叉查找树是二叉树的一种，它在二叉树的基础上又添加了限制条件: 对于树中的每个节点<code class="highlighter-rouge">X</code>，它的<strong>左子树</strong>中所有关键字的值<strong>小于</strong><code class="highlighter-rouge">X</code>的关键字的值，而它的<strong>右子树</strong>中所有关键字的值<strong>大于</strong><code class="highlighter-rouge">X</code>的关键字的值。</p>

<hr />

<h2 id="avl树">AVL树</h2>

<p><code class="highlighter-rouge">AVL(Adelson-Velskii and Landis)</code>树是带有<strong>平衡条件的</strong>二叉<strong>查找树</strong>。</p>

<p>这个平衡条件必须容易保持，并且它需保证树的深度是<code class="highlighter-rouge">O(log N)</code>。最简单的想法是要求左右子树具有相同的高度。</p>

<p>另一种平衡条件是，要求是要求每个节点都必须要有相同高度的左子树和右子树。</p>

<hr />

<h2 id="b-树-b-tree">B-树 (B-tree)</h2>

<blockquote>
  <p>这种树也是一种常用的查找树，不是二叉树。</p>
</blockquote>

<p>阶为<code class="highlighter-rouge">M</code>的<code class="highlighter-rouge">B-tree</code>具有下列结构特性：</p>

<p>树的根或者是一片树叶，或者其儿子数在<code class="highlighter-rouge">2</code>和<code class="highlighter-rouge">M</code>之间</p>

<ul>
  <li>除根外，所有非树叶节点的儿子数在<code class="highlighter-rouge">[M/2]</code>和<code class="highlighter-rouge">M</code>之间</li>
  <li>所有的树叶都在相同深度上</li>
</ul>

<hr />

<h2 id="红黑树">红黑树</h2>

<p>这是一种特殊的二叉树，这种树可以进行高效的中序遍历。</p>
:ET